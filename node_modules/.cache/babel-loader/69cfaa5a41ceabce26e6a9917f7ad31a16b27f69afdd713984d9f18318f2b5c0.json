{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      searchForm: {\n        name: '' // 用于存储搜索框的值\n      },\n      total: 0,\n      records: [],\n      currentPage: 1,\n      pageSize: 10,\n      form: {\n        id: null,\n        name: '',\n        account: '',\n        phone: '',\n        sex: '',\n        permission: '',\n        updateTime: '',\n        createTime: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    ...mapActions(['deleteEmployeeAction']),\n    searchEmployees() {\n      // 这里实现搜索员工的逻辑\n      this.fetchEmployees({\n        name: this.searchForm.name,\n        page: this.currentPage,\n        pageSize: this.pageSize\n      });\n    },\n    open(row) {\n      this.$confirm('此操作将删除该员工, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.deleteEmployee(row.id), this.$message({\n          type: 'success',\n          message: '删除成功!'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // 复选框选中后执行的方法\n    handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    clearSearch() {\n      this.searchForm.name = '';\n      this.fetchEmployees({\n        page: this.currentPage,\n        pageSize: this.pageSize\n      });\n    },\n    addEmployee() {\n      // 跳转到新增员工界面\n      this.$router.push('/path/to/AddEmployeeView'); // 替换为实际的路由路径\n    },\n    editEmployee(employee) {\n      // 跳转到编辑员工界面，并携带员工信息\n      this.$router.push({\n        path: '/path/to/EditEmployeeView',\n        // 替换为实际的路由路径\n        query: {\n          id: employee.id\n        }\n      });\n    },\n    deleteEmployee(id) {\n      axios({\n        //员工删除\n        url: '/api/business/employee/delete',\n        method: 'delete',\n        headers: {\n          \"token\": localStorage.getItem('token')\n        },\n        params: {\n          id: id\n        }\n      }).then(res => {\n        if (res.data.msg == \"NOT_LOGIN\") {\n          this.$router.push('/business/login');\n          return;\n        }\n        location.reload();\n        console.log(res.data.data);\n      }).catch(err => {\n        console.log(err.data.msg);\n      });\n    },\n    deleteSelectedEmployees() {\n      if (this.multipleSelection.length === 0) {\n        this.$message.warning('请至少选择一个员工进行删除');\n        return;\n      }\n      this.$confirm('此操作将永久删除所选员工, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 存储所有待删除员工的ID\n        const employeeIds = this.multipleSelection.map(employee => employee.id);\n\n        // 使用Promise.all来确保所有删除操作都完成\n        Promise.all(employeeIds.map(id => {\n          return this.deleteEmployee(id);\n        })).then(() => {\n          this.$message.success('所选员工删除成功');\n          // 清空选中的员工\n          this.multipleSelection = [];\n          // 重新获取员工列表\n          this.fetchEmployees({\n            page: this.currentPage,\n            pageSize: this.pageSize\n          });\n        }).catch(err => {\n          console.error(err);\n          this.$message.error('批量删除失败');\n        });\n      }).catch(() => {\n        // 用户点击了取消，不执行删除\n        this.$message.info('已取消删除');\n      });\n    },\n    handlePageChange(newPage) {\n      this.currentPage = newPage;\n      this.fetchEmployees({\n        page: this.currentPage,\n        pageSize: this.pageSize\n      });\n    },\n    fetchEmployees(params) {\n      axios({\n        url: '/api/business/employee/page',\n        method: 'get',\n        headers: {\n          \"token\": localStorage.getItem('token')\n        },\n        params // 使用params代替data，因为GET请求使用URL查询字符串传递参数\n      }).then(res => {\n        console.log(res);\n        this.total = res.data.data.total;\n        this.records = res.data.data.records;\n      }).catch(err => {\n        console.log(err.response.data.msg);\n      });\n    }\n  },\n  mounted() {\n    this.fetchEmployees({\n      page: this.currentPage,\n      pageSize: this.pageSize\n    });\n  }\n};","map":{"version":3,"names":["axios","mapActions","data","searchForm","name","total","records","currentPage","pageSize","form","id","account","phone","sex","permission","updateTime","createTime","password","methods","searchEmployees","fetchEmployees","page","open","row","$confirm","confirmButtonText","cancelButtonText","type","then","deleteEmployee","$message","message","catch","handleSelectionChange","val","multipleSelection","clearSearch","addEmployee","$router","push","editEmployee","employee","path","query","url","method","headers","localStorage","getItem","params","res","msg","location","reload","console","log","err","deleteSelectedEmployees","length","warning","employeeIds","map","Promise","all","success","error","info","handlePageChange","newPage","response","mounted"],"sources":["src/components/business/BusinessEmployeeManage.vue"],"sourcesContent":["<template>\r\n  <div class=\"employee-management\">\r\n    <h1>商家端管理员工</h1>\r\n    <el-form :inline=\"true\" class=\"demo-form-inline\">\r\n      <el-form-item label=\"姓名\">\r\n        <el-input v-model=\"searchForm.name\" placeholder=\"请输入姓名\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"searchEmployees\">查询</el-button>\r\n        <el-button @click=\"clearSearch\">清空</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    <el-button type=\"danger\" @click=\"deleteSelectedEmployees\">批量删除</el-button>\r\n    <el-button type=\"primary\" @click=\"addEmployee\">新增员工</el-button>\r\n\r\n    <!-- 表格 -->\r\n    <template>\r\n    <el-table :data=\"records\" style=\"width: 100%; margin-top: 20px;\" border @selection-change=\"handleSelectionChange\">\r\n      <el-table-column type=\"selection\" width=\"55\"  align=\"center\"></el-table-column>\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"180\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"姓名\" width=\"180\"></el-table-column>\r\n    <el-table-column prop=\"account\" label=\"账号\"></el-table-column>\r\n      <el-table-column prop=\"phone\" label=\"电话\"></el-table-column>\r\n      <el-table-column label=\"性别\" prop=\"sex\">\r\n        <template slot-scope=\"scope\">\r\n          <span v-if=\"scope.row.sex == 0\">男</span>\r\n          <span v-else-if=\"scope.row.sex == 1\">女</span>\r\n        </template>\r\n    </el-table-column>\r\n      <el-table-colum prop=\"permission\" label=\"权限\"></el-table-colum>\r\n      <el-table-column prop=\"updateTime\" label=\"更新时间\"></el-table-column>\r\n      <el-table-column prop=\"createTime\" label=\"创建时间\"></el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"mini\" @click=\"editEmployee(scope.row)\">编辑</el-button>\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"open(scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n</template>\r\n    <el-pagination @current-change=\"handlePageChange\" :current-page=\"currentPage\" :page-size=\"pageSize\"\r\n      layout=\"prev, pager, next, jumper\" :total=\"total\">\r\n    </el-pagination>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import axios from 'axios';\r\n  import { mapActions } from 'vuex';\r\n\r\n  export default {\r\n    data () {\r\n      return {\r\n        searchForm: {\r\n          name: '', // 用于存储搜索框的值\r\n        },\r\n        total: 0,\r\n        records: [],\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        form: {\r\n          id: null,\r\n          name: '',\r\n          account: '',\r\n          phone: '',\r\n          sex: '',\r\n          permission: '',\r\n          updateTime: '',\r\n          createTime: '',\r\n          password: '',\r\n        },\r\n      };\r\n    },\r\n    methods: {\r\n      ...mapActions(['deleteEmployeeAction']),\r\n      searchEmployees () {\r\n        // 这里实现搜索员工的逻辑\r\n        this.fetchEmployees({\r\n          name: this.searchForm.name,\r\n          page: this.currentPage,\r\n          pageSize: this.pageSize,\r\n        });\r\n      },\r\n      open(row)\r\n      {\r\n        this.$confirm('此操作将删除该员工, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          this.deleteEmployee(row.id),\r\n            this.$message({\r\n              type: 'success',\r\n              message: '删除成功!'\r\n            });\r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消删除'\r\n          });\r\n        });\r\n      },\r\n          // 复选框选中后执行的方法\r\n    handleSelectionChange(val) {\r\n      this.multipleSelection = val;\r\n    },\r\n      clearSearch () {\r\n        this.searchForm.name = '';\r\n        this.fetchEmployees({\r\n          page: this.currentPage,\r\n          pageSize: this.pageSize,\r\n        });\r\n      },\r\n      addEmployee () {\r\n        // 跳转到新增员工界面\r\n        this.$router.push('/path/to/AddEmployeeView'); // 替换为实际的路由路径\r\n      },\r\n      editEmployee (employee) {\r\n        // 跳转到编辑员工界面，并携带员工信息\r\n        this.$router.push({\r\n          path: '/path/to/EditEmployeeView', // 替换为实际的路由路径\r\n          query: { id: employee.id },\r\n        });\r\n      },\r\n      deleteEmployee (id) {\r\n        axios({//员工删除\r\n          url: '/api/business/employee/delete',\r\n          method: 'delete',\r\n          headers: {\r\n            \"token\": localStorage.getItem('token')\r\n          },\r\n          params: {\r\n            id: id\r\n          }\r\n        }).then(res => {\r\n          if (res.data.msg == \"NOT_LOGIN\") {\r\n            this.$router.push('/business/login')\r\n            return;\r\n          }\r\n          location.reload();\r\n          console.log(res.data.data)\r\n\r\n        }).catch(err => {\r\n          console.log(err.data.msg)\r\n        })\r\n      },\r\n      deleteSelectedEmployees() {\r\n        if (this.multipleSelection.length === 0) {\r\n          this.$message.warning('请至少选择一个员工进行删除');\r\n          return;\r\n        }\r\n\r\n        this.$confirm('此操作将永久删除所选员工, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          // 存储所有待删除员工的ID\r\n          const employeeIds = this.multipleSelection.map(employee => employee.id);\r\n\r\n          // 使用Promise.all来确保所有删除操作都完成\r\n          Promise.all(employeeIds.map(id => {\r\n            return this.deleteEmployee(id);\r\n          })).then(() => {\r\n            this.$message.success('所选员工删除成功');\r\n            // 清空选中的员工\r\n            this.multipleSelection = [];\r\n            // 重新获取员工列表\r\n            this.fetchEmployees({\r\n              page: this.currentPage,\r\n              pageSize: this.pageSize,\r\n            });\r\n          }).catch(err => {\r\n            console.error(err);\r\n            this.$message.error('批量删除失败');\r\n          });\r\n        }).catch(() => {\r\n          // 用户点击了取消，不执行删除\r\n          this.$message.info('已取消删除');\r\n        });\r\n      },\r\n      handlePageChange (newPage) {\r\n        this.currentPage = newPage;\r\n        this.fetchEmployees({\r\n          page: this.currentPage,\r\n          pageSize: this.pageSize,\r\n        });\r\n      },\r\n      fetchEmployees (params) {\r\n        axios({\r\n          url: '/api/business/employee/page',\r\n          method: 'get',\r\n          headers: {\r\n            \"token\": localStorage.getItem('token')\r\n          },\r\n          params, // 使用params代替data，因为GET请求使用URL查询字符串传递参数\r\n        }).then(res => {\r\n          console.log(res)\r\n          this.total = res.data.data.total;\r\n          this.records = res.data.data.records;\r\n        }).catch(err => {\r\n          console.log(err.response.data.msg);\r\n        });\r\n      },\r\n    },\r\n    mounted () {\r\n      this.fetchEmployees({\r\n        page: this.currentPage,\r\n        pageSize: this.pageSize,\r\n      });\r\n    },\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .employee-management {\r\n    margin: 30px;\r\n  }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}